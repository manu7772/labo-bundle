type: install
name: {{ data.name }}
displayName: {{ data.displayName }}
envGroups: {{ data.envGroupsAsString|raw }}
{# envName: env-ve-test #}
id: {{ data.id }}
categories: ["apps/websites"]
logo: {{ data.logo|default('https://symfony.com/logos/symfony_black_03.png') }}
homepage: {{ data.homepage }}
baseUrl: {{ data.baseUrl }}

description: |
  This JPS package (for Jelastic) provides a standard environment for your Symfony projects.
  
ssl: true

globals:
  ROOT_PASSWORD: "${fn.password}"

settings:
  fields:
    - name: dbname
      caption: Database name ?
      type: string
{% if data.dbname %}
      default: {{ data.dbname }}
{% endif %}

    - name: dbuser
      caption: Database webapp user ?
      type: string
{% if data.dbuser %}
      default: {{ data.dbuser }}
{% endif %}

    - name: dbpwd
      caption: Database password for webapp user ?
      type: string
{% if data.dbpwd %}
      default: {{ data.dbpwd }}
{% endif %}
{% if data.usenpm %}

    - name: npm
      caption: Node and NPM ?
      type: toggle
      value: true
{% endif %}

nodes:
  - nodeType: nginx
    nodeGroup: bl
    count: 1
    fixedCloudlets: 2
    cloudlets: 4
    displayName: LoadBalancer
    diskLimit: 30G
    isSLBAccessEnabled: false
    extip: 1
    
  - image: php:8.3.9-apache
    count: 1
    fixedCloudlets: 2
    cloudlets: 4
    nodeGroup: cp
    displayName: FrontWeb
    diskLimit: 30G
    env:
      DATABASE_URL: "mysql://${settings.dbuser}:${settings.dbpwd}@sqldb:3306/${settings.dbname}?serverVersion=8.0.36&charset=utf8mb4"
    volumes:
      - /var/www
    isSLBAccessEnabled: false
    
  - nodeType: mysql8
    count: 1
    fixedCloudlets: 2
    cloudlets: 4
    nodeGroup: sqldb
    displayName: SQLDB
    diskLimit: 30G
    links:
      - cp:CP
    env:
      MYSQL_ROOT_PASSWORD: "${globals.ROOT_PASSWORD}"
      DB_NAME: "${settings.dbname}"
      DATABASE_URL: "${CP_DATABASE_URL}"
    volumes:
      - /var/lib/mysql
    isSLBAccessEnabled: false
{% if data.usemailcatcher %}

  - image: schickling/mailcatcher
    count: 1
    fixedCloudlets: 1
    cloudlets: 2
    nodeGroup: mailcatcher
    displayName: MailCatcher
    diskLimit: 10G
{% endif %}

prepareSqlDatabase:
  - nodeGroup: sqldb
    loginCredentials:
      user: root
      password: "${globals.ROOT_PASSWORD}"
    newDatabaseName: "${settings.dbname}"
    newDatabaseUser:
      name: ${settings.dbuser}
      password: ${settings.dbpwd}

onInstall:
  - composer
  - symfonycli
  - git
  - apacheConf
  - php
  - mysql
{% if data.usenpm %}
  - if ("${settings.npm}") :
      - npm
{% endif %}

actions:
  composer:
    cmd[cp]: |-
      curl -sS https://getcomposer.org/installer | php
      mv composer.phar /usr/bin/composer
      chmod +x /usr/bin/composer
    user: root
  
  symfonycli:
    cmd[cp]: |-
      echo 'deb [trusted=yes] https://repo.symfony.com/apt/ /' | tee /etc/apt/sources.list.d/symfony-cli.list
      apt update
      apt install symfony-cli
    user: root

  git:
    cmd[cp]: |-
      apt-get install -yqq --no-install-recommends git
      
  apacheConf:
    cmd[cp]: |-
      cd /var/www
      rm -R public/
      rm -R html/
      cd /etc/apache2/sites-enabled
      rm 000-default.conf
      wget https://raw.githubusercontent.com/yoanbernabeu/Symfony-Jelastic/main/config/apache.conf
      apachectl restart
      
  php:
    cmd[cp]: |-
      curl -sSLf \
      -o /usr/local/bin/install-php-extensions \
      https://github.com/mlocati/docker-php-extension-installer/releases/latest/download/install-php-extensions && \
      chmod +x /usr/local/bin/install-php-extensions && \
      install-php-extensions opcache intl zip calendar dom mbstring gd xsl
      echo -e memory_limit=256M\\ndate.timezone=Europe/Paris\\npost_max_size=20M\\nupload_max_filesize=20M > /usr/local/etc/php/conf.d/docker-php-ext-addon.ini
      apachectl restart
  
  mysql:
    cmd[cp]: |-
      docker-php-ext-install pdo pdo_mysql
      apachectl restart
{% if data.usenpm %}

  npm:
    cmd[cp]: |-
      apt install nodejs npm
      npm install -g pnpm
{% endif %}

success: |
  Your Symfony environment is ready to go!
  DB USER name: ${settings.dbuser}
  DB USER password: ${settings.dbpwd}